import numpy as np

def forward_kinematics(theta):
   
    T = np.eye(4)
    alpha = [-np.pi/2, np.pi/2, np.pi/2, -np.pi/2, -np.pi/2, np.pi/2, 0]
    a = [0, 0, 0, 0, 0, 0, 0]
    d = [0.340, 0, 0.400, 0, 0.400, 0, 0.126]
    
    for i in range(len(theta)):
        # Update the transformation matrix
        A_i = np.array([
            [np.cos(theta[i]), -np.sin(theta[i]) * np.cos(alpha[i]), np.sin(theta[i]) * np.sin(alpha[i]), a[i] * np.cos(theta[i])],
            [np.sin(theta[i]), np.cos(theta[i]) * np.cos(alpha[i]), -np.cos(theta[i]) * np.sin(alpha[i]), a[i] * np.sin(theta[i])],
            [0, np.sin(alpha[i]), np.cos(alpha[i]), d[i]],
            [0, 0, 0, 1]
        ])
        
        T = np.dot(T, A_i)

    return T

# Define DH parameters



theta = [np.radians(30), np.radians(-45), np.radians(60), np.radians(75), np.radians(-20), np.radians(95), np.radians(-80)]


# Calculate the forward kinematics
result = forward_kinematics(theta)

# Display the result
print("Forward Kinematics Result:")
print(result)

